#from matplotlib import pylab
#from pylab import *
from django.core.urlresolvers import reverse
import PIL
import PIL.Image
import json
from bson import json_util
import StringIO
from django.http import HttpResponse
from django.template import RequestContext, loader
from pymongo import MongoClient
import re
from datetime import datetime, date, timedelta

class DateTimeEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, datetime.datetime):
            return obj.isoformat()
        elif isinstance(obj, datetime.date):
            return obj.isoformat()
        elif isinstance(obj, datetime.timedelta):
            return (datetime.datetime.min + obj).time().isoformat()
	else:
            return super(DateTimeEncoder, self).default(obj)

def avanzado(request,idas,data_ini,data_fin,mote,sensor,operacion):
	##media de hora a hora si el rango es menor a 7 d√≠as.
	

	if operacion == "media":
		definitivo=[]
		client =  MongoClient('localhost:27017')
		db = client.sth_databases
		#measure = servicio.split("&")
		#ahora = datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d %H:%M:%S')
		yesterday =  datetime.datetime.now()-timedelta(1)
		yester_screen = datetime.datetime.strftime(yesterday, '%Y-%m-%d %H:%M:%S')
	if (measure[0] == 'dia'):
		consulta = db['sth_/qfresco_'+idas+motes+'_motes'].find({"recvTime" : { "$gt" : yester_screen } },{"_id":0,"attrType":0,"recvTime":1})
		for row in consulta:
			payload=json.dumps({row['attrName']:row['attrValue']},)
			print attrName
			definitivo.append(payload)
	
#		if (servicio == 'mote-info'):
#			measure = id_di[2]
#			consulta = db['sth_/qfresco_'+carlos+'_idas'+mote+'_motes'].find({},{"_id":0,"attrType":0}).sort([("_id", -1)]).limit(4)
#			seen = set()
#			for row in consulta:
#				if row['attrName'] not in seen:
#					timehoy= DateTimeEncoder().encode(row["recvTime"])
#					payload=json.dumps({row['attrName']:row['attrValue'],'recvTime':timehoy},)
#					definitivo.append(payload)
#					seen.add(row['attrName'])

#		if (servicio == 'sensor-info'):
			measure= id_di.split("&")
			consulta = db['sth_/qfresco_carlos_albertocarlos_alberto_idas'+measure[0][2]+'_motes'].find({"attrName":measure[1]},{"_id":0,"attrType":0}).sort([("_id", -1)])
			for row in consulta:
				if (row['attrValue'] != '0'):
					timehoy= DateTimeEncoder().encode(row["recvTime"])
					payload=json.dumps({measure[1]:row['attrValue'],"recvTime":timehoy},)
					definitivo.append(payload)
					
		return HttpResponse(definitivo, mimetype="application/json")
	#except:
	#	print "URL no encontrada"
	#	return HttpResponse('<h1>Page not found</h1>')   

def medio(request,idas,operacion,mote,sensor):
	print operacion 
	print idas
	print sensor
	definitivo=[]
	client =  MongoClient('localhost:27017')
	db = client.sth_databases
	measure = servicio.split("&")
	#ahora = datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d %H:%M:%S')
	yesterday =  datetime.datetime.now()-timedelta(1)
	yester_screen = datetime.datetime.strftime(yesterday, '%Y-%m-%d %H:%M:%S')
	if (measure[0] == 'dia'):
		consulta = db["sth_/qfresco_'+grow+'_'+idas+motes+'_motes"].find({"recvTime" : { "$gt" : yester_screen } },{"_id":0,"attrType":0,"recvTime":1})
		for row in consulta:
			payload=json.dumps({row['attrName']:row['attrValue']},)
			print attrName
			definitivo.append(payload)
	
		if (servicio == 'mote-info'):
			measure = id_di[2]
			consulta = db['sth_/qfresco_'+carlos+'_idas'+mote+'_motes'].find({},{"_id":0,"attrType":0}).sort([("_id", -1)]).limit(4)
			seen = set()
			for row in consulta:
				if row['attrName'] not in seen:
					timehoy= DateTimeEncoder().encode(row["recvTime"])
					payload=json.dumps({row['attrName']:row['attrValue'],'recvTime':timehoy},)
					definitivo.append(payload)
					seen.add(row['attrName'])

		if (servicio == 'sensor-info'):
			measure= id_di.split("&")
			consulta = db['sth_/qfresco_carlos_albertocarlos_alberto_idas'+measure[0][2]+'_motes'].find({"attrName":measure[1]},{"_id":0,"attrType":0}).sort([("_id", -1)])
			for row in consulta:
				if (row['attrValue'] != '0'):
					timehoy= DateTimeEncoder().encode(row["recvTime"])
					payload=json.dumps({measure[1]:row['attrValue'],"recvTime":timehoy},)
					definitivo.append(payload)
					
		return HttpResponse(definitivo, mimetype="application/json")
	#except:
	#	print "URL no encontrada"
	#	return HttpResponse('<h1>Page not found</h1>')   

def avanzado(request,idas,operacion,data_ini,data_fin,sensor):
	print "entra al user" 
	#try:
	print "entra"
	definitivo=[]
	client =  MongoClient('localhost:27017')
	db = client.sth_databases
	measure = servicio.split("&")
	#ahora = datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d %H:%M:%S')
	yesterday =  datetime.datetime.now()-timedelta(1)
	yester_screen = datetime.datetime.strftime(yesterday, '%Y-%m-%d %H:%M:%S')
	if (measure[0] == 'dia'):
		consulta = db["sth_/qfresco_'+grow+'_'+idas+motes+'_motes"].find({"recvTime" : { "$gt" : yester_screen } },{"_id":0,"attrType":0,"recvTime":1})
		for row in consulta:
			payload=json.dumps({row['attrName']:row['attrValue']},)
			print attrName
			definitivo.append(payload)
	
		if (servicio == 'mote-info'):
			measure = id_di[2]
			consulta = db['sth_/qfresco_'+carlos+'_idas'+mote+'_motes'].find({},{"_id":0,"attrType":0}).sort([("_id", -1)]).limit(4)
			seen = set()
			for row in consulta:
				if row['attrName'] not in seen:
					timehoy= DateTimeEncoder().encode(row["recvTime"])
					payload=json.dumps({row['attrName']:row['attrValue'],'recvTime':timehoy},)
					definitivo.append(payload)
					seen.add(row['attrName'])

		if (servicio == 'sensor-info'):
			measure= id_di.split("&")
			consulta = db['sth_/qfresco_carlos_albertocarlos_alberto_idas'+measure[0][2]+'_motes'].find({"attrName":measure[1]},{"_id":0,"attrType":0}).sort([("_id", -1)])
			for row in consulta:
				if (row['attrValue'] != '0'):
					timehoy= DateTimeEncoder().encode(row["recvTime"])
					payload=json.dumps({measure[1]:row['attrValue'],"recvTime":timehoy},)
					definitivo.append(payload)
					
		return HttpResponse(definitivo, mimetype="application/json")
	#except:
	#	print "URL no encontrada"
	#	return HttpResponse('<h1>Page not found</h1>')   


